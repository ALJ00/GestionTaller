package bicicletasegibide.entity;
// Generated 15-nov-2019 18:09:33 by Hibernate Tools 3.2.1.GA


import bicicletasegibide.util.NewHibernateUtil;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import org.hibernate.ObjectNotFoundException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.exception.ConstraintViolationException;

/**
 * Reparaciones generated by hbm2java
 */
public class Reparaciones  implements java.io.Serializable {


     private String codigoreparacion;
     private String nombre;
     private String ciudad;
     private Set gestioneses = new HashSet(0);

    public Reparaciones() {
    }

    public Reparaciones(String codigoreparacion, String nombre, String ciudad) {
        this.codigoreparacion = codigoreparacion;
        this.nombre = nombre;
        this.ciudad = ciudad;
    }

    public Reparaciones(String codigoreparacion, String nombre) {
        this.codigoreparacion = codigoreparacion;
        this.nombre = nombre;
    }
    public Reparaciones(String codigoreparacion, String nombre, String ciudad, Set gestioneses) {
       this.codigoreparacion = codigoreparacion;
       this.nombre = nombre;
       this.ciudad = ciudad;
       this.gestioneses = gestioneses;
    }
   
    public String getCodigoreparacion() {
        return this.codigoreparacion;
    }
    
    public void setCodigoreparacion(String codigoreparacion) {
        this.codigoreparacion = codigoreparacion;
    }
    public String getNombre() {
        return this.nombre;
    }
    
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public String getCiudad() {
        return this.ciudad;
    }
    
    public void setCiudad(String ciudad) {
        this.ciudad = ciudad;
    }
    public Set getGestioneses() {
        return this.gestioneses;
    }
    
    public void setGestioneses(Set gestioneses) {
        this.gestioneses = gestioneses;
    }


    // ********************** consultas ********************************

    // insertar nueva reparacion
    public boolean insertarReparacion(Reparaciones reparacion){

        SessionFactory sesion = NewHibernateUtil.getSessionFactory();
        Session session = sesion.openSession();
        Transaction tx = session.beginTransaction();

        boolean resp = false;

        try{

            session.save(reparacion);

            try {
                tx.commit();

                resp = true;


            } catch (ConstraintViolationException e) {

                System.out.println("REPARACION DUPLICADA");
                System.out.printf("MENSAJE:%s%n", e.getMessage());
                System.out.printf("COD ERROR:%d%n", e.getErrorCode());
                System.out.printf("ERROR SQL:%s%n",
                        e.getSQLException().getMessage());
                JOptionPane.showMessageDialog(null, "REPARACION DUPLICADa");

                resp = false;
            }


        }catch (Exception e){

            System.out.printf("MENSAJE:%s%n", e.getMessage());

            JOptionPane.showMessageDialog(null, "ERROR "+e.getMessage());

        }

        session.close();

        return resp;

    }

    // actualizar reparacion
    public void modificarReparacion(Reparaciones reparacionModificada){

        SessionFactory sesion = NewHibernateUtil.getSessionFactory();
        Session session = sesion.openSession();
        Transaction tx = session.beginTransaction();

        Reparaciones reparacion = new Reparaciones();

        try{

            reparacion = (Reparaciones) session.load(Reparaciones.class, (String)reparacionModificada.getCodigoreparacion());

            reparacion.setCodigoreparacion(reparacionModificada.getCodigoreparacion());
            reparacion.setNombre(reparacionModificada.getNombre());
            reparacion.setCiudad(reparacionModificada.getCiudad());

            session.update(reparacion);

           try{

               tx.commit();
               JOptionPane.showMessageDialog(null, "REPARACION MODIFICADA CORRECTAMENTE");

           }catch(Exception e){
               JOptionPane.showMessageDialog(null, e.getMessage());

           }


        }catch(ObjectNotFoundException o){

            JOptionPane.showMessageDialog(null, "NO EXISTE LA REPARACION");

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());

        }

        session.close();

    }

    // listar las reparaciones
    public ArrayList<Reparaciones> listarReparaciones(){

        SessionFactory sesion = NewHibernateUtil.getSessionFactory();
        Session session = sesion.openSession();

        ArrayList arrayListReparaciones = new ArrayList();

        // query
        Query q = session.createQuery("from Reparaciones");

        List <Reparaciones> lista = q.list();

        // Obtengo un Iterador y recorro la lista
        Iterator <Reparaciones> iter = lista.iterator();

        lista.size();

        while(iter.hasNext()){

            //extraer el objeto
            Reparaciones reparacion = (Reparaciones) iter.next();
            arrayListReparaciones.add(reparacion);

        }


        return arrayListReparaciones;
    }

    // borrar reparacion
    public void borrarReparacion(Reparaciones reparacionAborrar){

        SessionFactory sesion = NewHibernateUtil.getSessionFactory();
        Session session = sesion.openSession();
        Transaction tx = session.beginTransaction();

        //REPARACION A ELIMINAR
        Reparaciones de = (Reparaciones) session.load(Reparaciones.class, (String) reparacionAborrar.getCodigoreparacion());

        try{
            session.delete(de);
            tx.commit();
            JOptionPane.showMessageDialog(null, "REPARACION BORRADA CORRECTAMENTE");
        } catch (ObjectNotFoundException o){

            System.out.println ("NO EXISTE LA REPARACIÓN");
            JOptionPane.showMessageDialog(null, "NO EXISTE LA REPARACIÓN");

        } catch (ConstraintViolationException c){

            System.out.println ("NO SE PUEDE ELIMINAR");
            JOptionPane.showMessageDialog(null, "NO SE PUEDE ELIMINAR");

        } catch (Exception e){

            System.out.println ("ERROR NO CONTROLADO");
            JOptionPane.showMessageDialog(null, "ERROR NO CONTROLADO");

            e.printStackTrace();
        }

        session.close();
    }

    // reparacion por campo seleccionado
    public ArrayList<Reparaciones> listarReparacionesPorCampo(String datoTextField, String busqueda){

        SessionFactory sesion = NewHibernateUtil.getSessionFactory();
        Session session = sesion.openSession();

        String consulta = "";
        ArrayList arrayListReparaciones = new ArrayList();


        // query
        Query q = null;

        
        if(busqueda.equalsIgnoreCase("Por código")){
            consulta = "codigoreparacion";
            q = session.createQuery("from Reparaciones where "+consulta+" = ?");
        }else if(busqueda.equalsIgnoreCase("Por nombre")){
            consulta = "nombre";
            q = session.createQuery("from Reparaciones where "+consulta+" = ?");
        }else if(busqueda.equalsIgnoreCase("Por ciudad")){
            consulta = "ciudad";
            q = session.createQuery("from Reparaciones where "+consulta+" = ?");
        }else if(busqueda.equalsIgnoreCase("Listar todas")){
            consulta="";
            q = session.createQuery("from Reparaciones");
        }

       
        //q.setParameter(0, (String) consulta);
        q.setParameter(0, (String) datoTextField);
        

        List <Reparaciones> lista = q.list();

        // Obtengo un Iterador y recorro la lista
        Iterator <Reparaciones> iter = lista.iterator();

        lista.size();

        while(iter.hasNext()){

            //extraer el objeto
            Reparaciones reparacion = (Reparaciones) iter.next();
            arrayListReparaciones.add(reparacion);

        }


        return arrayListReparaciones;

    }


}


